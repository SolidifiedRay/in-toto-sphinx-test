Description: Use python3 in tests
 Some upstream tests call the python interpreter in a subprocess, e.g. to test
 the custom `process` module or to run simple in-toto step or inspection
 commands. In debian, where we only build for python3, "python" is not
 available during build and thus makes those tests fail. This patch replaces
 "python" with "python3" where applicable.
Forwarded: not-needed
Origin: upstream, https://github.com/in-toto/in-toto/commit/a7f4baf8d0186fa4a6314264707f4d5d1b3cecdc

diff --git a/tests/demo_files/demo.layout.template b/tests/demo_files/demo.layout.template
index 64ca250..0ac7f7e 100644
--- a/tests/demo_files/demo.layout.template
+++ b/tests/demo_files/demo.layout.template
@@ -25,7 +25,7 @@
             ],
             "name": "untar",
             "run": [
-                "python",
+                "python3",
                 "./scripts/tar",
                 "xfz",
                 "foo.tar.gz"
diff --git a/tests/test_in_toto_mock.py b/tests/test_in_toto_mock.py
index f0b45ba..82e89c2 100644
--- a/tests/test_in_toto_mock.py
+++ b/tests/test_in_toto_mock.py
@@ -68,7 +68,7 @@ class TestInTotoMockTool(CliTestCase, TmpDirMixin):
   def test_main_required_args(self):
     """Test CLI command with required arguments. """
 
-    args = ["--name", self.test_step, "--", "python", "--version"]
+    args = ["--name", self.test_step, "--", "python3", "--version"]
     self.assert_cli_sys_exit(args, 0)
 
     self.assertTrue(os.path.exists(self.test_link))
diff --git a/tests/test_in_toto_run.py b/tests/test_in_toto_run.py
index b41762c..b49849a 100755
--- a/tests/test_in_toto_run.py
+++ b/tests/test_in_toto_run.py
@@ -77,7 +77,7 @@ class TestInTotoRunTool(CliTestCase, TmpDirMixin, GPGKeysMixin, GenKeysMixin):
     """Test CLI command with required arguments. """
 
     args = ["--step-name", self.test_step, "--key", self.rsa_key_path, "--",
-        "python", "--version"]
+        "python3", "--version"]
 
     self.assert_cli_sys_exit(args, 0)
     self.assertTrue(os.path.exists(self.test_link_rsa))
@@ -89,7 +89,7 @@ class TestInTotoRunTool(CliTestCase, TmpDirMixin, GPGKeysMixin, GenKeysMixin):
     named_args = ["--step-name", self.test_step, "--key",
         self.rsa_key_path, "--materials", self.test_artifact, "--products",
         self.test_artifact, "--record-streams"]
-    positional_args = ["--", "python", "--version"]
+    positional_args = ["--", "python3", "--version"]
 
     # Test and assert recorded artifacts
     args1 = named_args + positional_args
@@ -135,7 +135,7 @@ class TestInTotoRunTool(CliTestCase, TmpDirMixin, GPGKeysMixin, GenKeysMixin):
     """Test CLI command with metadata directory. """
     tmp_dir = os.path.realpath(tempfile.mkdtemp(dir=os.getcwd()))
     args = ["--step-name", self.test_step, "--key", self.rsa_key_path,
-        "--metadata-directory", tmp_dir, "--", "python", "--version"]
+        "--metadata-directory", tmp_dir, "--", "python3", "--version"]
 
     self.assert_cli_sys_exit(args, 0)
 
@@ -167,7 +167,7 @@ class TestInTotoRunTool(CliTestCase, TmpDirMixin, GPGKeysMixin, GenKeysMixin):
           "-n", self.test_step,
           "--key", key_path,
           "--key-type", key_type]
-      cmd = ["--", "python", "--version"]
+      cmd = ["--", "python3", "--version"]
 
       # Make sure the link file to be generated doesn't already exist
       self.assertFalse(os.path.exists(link_path))
@@ -190,7 +190,7 @@ class TestInTotoRunTool(CliTestCase, TmpDirMixin, GPGKeysMixin, GenKeysMixin):
     """Test CLI command with specified gpg key. """
     args = ["-n", self.test_step,
             "--gpg", self.gpg_key_85DA58,
-            "--gpg-home", self.gnupg_home, "--", "python", "--version"]
+            "--gpg-home", self.gnupg_home, "--", "python3", "--version"]
 
     self.assert_cli_sys_exit(args, 0)
     link_filename = FILENAME_FORMAT.format(step_name=self.test_step,
@@ -202,7 +202,7 @@ class TestInTotoRunTool(CliTestCase, TmpDirMixin, GPGKeysMixin, GenKeysMixin):
   def test_main_with_default_gpg_key(self):
     """Test CLI command with default gpg key. """
     args = ["-n", self.test_step,
-            "--gpg", "--gpg-home", self.gnupg_home, "--", "python", "--version"]
+            "--gpg", "--gpg-home", self.gnupg_home, "--", "python3", "--version"]
 
     self.assert_cli_sys_exit(args, 0)
 
diff --git a/tests/test_runlib.py b/tests/test_runlib.py
index 50a771a..3b589e5 100755
--- a/tests/test_runlib.py
+++ b/tests/test_runlib.py
@@ -513,17 +513,17 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
   def test_in_toto_run_verify_signature(self):
     """Successfully run, verify signed metadata. """
     link = in_toto_run(self.step_name, None, None,
-        ["python", "--version"], True, self.key)
+        ["python3", "--version"], True, self.key)
     link.verify_signature(self.key)
 
   def test_in_toto_run_no_signature(self):
     """Successfully run, verify empty signature field. """
-    link = in_toto_run(self.step_name, None, None, ["python", "--version"])
+    link = in_toto_run(self.step_name, None, None, ["python3", "--version"])
     self.assertFalse(len(link.signatures))
 
   def test_in_toto_run_with_byproduct(self):
     """Successfully run, verify recorded byproduct. """
-    link = in_toto_run(self.step_name, None, None, ["python", "--version"],
+    link = in_toto_run(self.step_name, None, None, ["python3", "--version"],
         record_streams=True)
 
     # this or clause may seem weird, but given that python 2 prints its version
@@ -536,14 +536,14 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
 
   def test_in_toto_run_without_byproduct(self):
     """Successfully run, verify byproduct is not recorded. """
-    link = in_toto_run(self.step_name, None, None, ["python", "--version"],
+    link = in_toto_run(self.step_name, None, None, ["python3", "--version"],
         record_streams=False)
     self.assertFalse(len(link.signed.byproducts.get("stdout")))
 
   def test_in_toto_run_compare_dumped_with_returned_link(self):
     """Successfully run, compare dumped link is equal to returned link. """
     link = in_toto_run(self.step_name, [self.test_artifact],
-        [self.test_artifact], ["python", "--version"], True, self.key)
+        [self.test_artifact], ["python3", "--version"], True, self.key)
     link_dump = Metablock.load(
         FILENAME_FORMAT.format(step_name=self.step_name, keyid=self.key["keyid"]))
     self.assertEqual(repr(link), repr(link_dump))
@@ -553,7 +553,7 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
      compare dumped link is equal to returned link"""
     tmp_dir = os.path.realpath(tempfile.mkdtemp(dir=os.getcwd()))
     link = in_toto_run(self.step_name, [self.test_artifact],
-        [self.test_artifact], ["python", "--version"], True, self.key,
+        [self.test_artifact], ["python3", "--version"], True, self.key,
         metadata_directory=tmp_dir)
     file_path = os.path.join(tmp_dir, FILENAME_FORMAT.format(step_name=self.step_name,
         keyid=self.key["keyid"]))
@@ -565,13 +565,13 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
      compare the signed is equal"""
     tmp_dir = os.path.realpath(tempfile.mkdtemp(dir=os.getcwd()))
     in_toto_run(self.step_name, [self.test_artifact], [self.test_artifact],
-        ["python", "--version"], True, self.key, metadata_directory=tmp_dir)
+        ["python3", "--version"], True, self.key, metadata_directory=tmp_dir)
     file_path = os.path.join(tmp_dir, FILENAME_FORMAT.format(step_name=self.step_name,
         keyid=self.key["keyid"]))
     link_dump_with_md = Metablock.load(file_path)
 
     in_toto_run(self.step_name, [self.test_artifact], [self.test_artifact],
-        ["python", "--version"], True, self.key)
+        ["python3", "--version"], True, self.key)
     link_dump_without_md = Metablock.load(
         FILENAME_FORMAT.format(step_name=self.step_name, keyid=self.key["keyid"]))
     self.assertEqual(repr(link_dump_with_md.signed),
@@ -580,13 +580,13 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
   def test_in_toto_run_verify_recorded_artifacts(self):
     """Successfully run, verify properly recorded artifacts. """
     link = in_toto_run(self.step_name, [self.test_artifact],
-        [self.test_artifact], ["python", "--version"])
+        [self.test_artifact], ["python3", "--version"])
     self.assertEqual(list(link.signed.materials.keys()),
         list(link.signed.products.keys()), [self.test_artifact])
 
   def test_in_toto_run_verify_workdir(self):
     """Successfully run, verify cwd. """
-    link = in_toto_run(self.step_name, [], [], ["python", "--version"],
+    link = in_toto_run(self.step_name, [], [], ["python3", "--version"],
         record_environment=True)
     self.assertEqual(link.signed.environment["workdir"],
         os.getcwd().replace("\\", "/"))
@@ -604,7 +604,7 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
 
       # Call in_toto_run and record artifacts as materials and products
       # with line ending normalization on
-      link = in_toto_run(self.step_name, paths, paths, ["python", "--version"],
+      link = in_toto_run(self.step_name, paths, paths, ["python3", "--version"],
           normalize_line_endings=True).signed
 
       # Check that all three hashes in materials and products are equal
@@ -622,20 +622,20 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
     """Fail run, passed key is not properly formatted. """
     with self.assertRaises(securesystemslib.exceptions.FormatError):
       in_toto_run(self.step_name, None, None,
-          ["python", "--version"], True, "this-is-not-a-key")
+          ["python3", "--version"], True, "this-is-not-a-key")
 
   def test_in_toto_wrong_key(self):
     """Fail run, passed key is a public key. """
     with self.assertRaises(securesystemslib.exceptions.FormatError):
       in_toto_run(self.step_name, None, None,
-          ["python", "--version"], True, self.key_pub)
+          ["python3", "--version"], True, self.key_pub)
 
   def test_nonexistent_directory(self):
     """Fail run, passed metadata_directory not exist. """
     expected_error = IOError if sys.version_info < (3, 0) \
         else FileNotFoundError
     with self.assertRaises(expected_error):
-      in_toto_run(self.step_name, None, None, ["python", "--version"],
+      in_toto_run(self.step_name, None, None, ["python3", "--version"],
           True, self.key, metadata_directory='nonexistentDir')
 
   def test_not_a_directory(self):
@@ -647,7 +647,7 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
     expected_error = IOError if sys.version_info < (3, 0) \
         else (NotADirectoryError, FileNotFoundError)
     with self.assertRaises(expected_error):
-      in_toto_run(self.step_name, None, None, ["python", "--version"],
+      in_toto_run(self.step_name, None, None, ["python3", "--version"],
           True, self.key, metadata_directory=path)
     os.remove(path)
 
@@ -660,7 +660,7 @@ class TestInTotoRun(unittest.TestCase, TmpDirMixin):
     expected_error = IOError if sys.version_info < (3, 0) \
         else PermissionError
     with self.assertRaises(expected_error):
-      in_toto_run(self.step_name, None, None, ["python", "--version"],
+      in_toto_run(self.step_name, None, None, ["python3", "--version"],
           True, self.key, metadata_directory=tmp_dir)
     os.rmdir(tmp_dir)
 
diff --git a/tests/test_verifylib.py b/tests/test_verifylib.py
index 55b1a55..7f8c7a9 100644
--- a/tests/test_verifylib.py
+++ b/tests/test_verifylib.py
@@ -107,7 +107,7 @@ class TestRunAllInspections(unittest.TestCase, TmpDirMixin):
         "steps": [],
         "inspect": [{
           "name": "touch-bar",
-          "run": ["python", os.path.join(scripts_directory, "touch"), "bar"],
+          "run": ["python3", os.path.join(scripts_directory, "touch"), "bar"],
         }]
       })
 
@@ -143,7 +143,7 @@ class TestRunAllInspections(unittest.TestCase, TmpDirMixin):
         "steps": [],
         "inspect": [{
           "name": "non-zero-inspection",
-          "run": ["python", "./scripts/expr", "1", "/", "0"],
+          "run": ["python3", "./scripts/expr", "1", "/", "0"],
         }]
     })
     with self.assertRaises(BadReturnValueError):
@@ -782,7 +782,7 @@ class TestInTotoVerify(unittest.TestCase, TmpDirMixin):
 
     # dump layout with failing inspection retval
     layout = copy.deepcopy(layout_template)
-    layout.signed.inspect[0].run = ["python", "./scripts/expr", "1", "/", "0"]
+    layout.signed.inspect[0].run = ["python3", "./scripts/expr", "1", "/", "0"]
     layout.sign(alice)
     layout.dump(self.layout_failing_inspection_retval)
 
